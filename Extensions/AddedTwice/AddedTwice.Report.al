report 56790 "AddedTwice"
{
    Caption = 'Return Order Confirmation';
    PreviewMode = PrintLayout;
    WordLayout = './Layouts/AddedTwice.docx';
    DefaultLayout = Word;

    dataset
    {
        dataitem("Sales Header";"Sales Header")
        {
            RequestFilterFields = "No.", "Sell-to Customer No.", "No. Printed";
            RequestFilterHeading = 'Sales Return Order';
            DataItemTableView = sorting("Document Type", "No.")where("Document Type"=CONST("Return Order"));

            column(ReportForNavId_1;1)
            {
            } // Autogenerated by ForNav - Do not delete
            column(ReportForNav_SalesHeader;ReportForNavWriteDataItem('SalesHeader', "Sales Header"))
            {
            }
            column(DocType_SalesHdr;"Document Type")
            {
            IncludeCaption = false;
            }
            column(No_SalesHdr;"No.")
            {
            IncludeCaption = false;
            }
            column(TotalCaption;TotalCaptionLbl)
            {
            IncludeCaption = false;
            }
            column(VATPercentageCaption;VATPercentageCaptionLbl)
            {
            IncludeCaption = false;
            }
            column(VATBaseCaption;VATBaseCaptionLbl)
            {
            IncludeCaption = false;
            }
            column(VATAmountCaption;VATAmountCaptionLbl)
            {
            IncludeCaption = false;
            }
            column(VATIdentifierCaption;VATIdentifierCaptionLbl)
            {
            IncludeCaption = false;
            }
            column(InvDiscAmtCaption;InvDiscAmtCaptionLbl)
            {
            IncludeCaption = false;
            }
            column(SellToContactPhoneNoLbl;SellToContactPhoneNoLbl)
            {
            IncludeCaption = false;
            }
            column(SellToContactMobilePhoneNoLbl;SellToContactMobilePhoneNoLbl)
            {
            IncludeCaption = false;
            }
            column(SellToContactEmailLbl;SellToContactEmailLbl)
            {
            IncludeCaption = false;
            }
            column(BillToContactPhoneNoLbl;BillToContactPhoneNoLbl)
            {
            IncludeCaption = false;
            }
            column(BillToContactMobilePhoneNoLbl;BillToContactMobilePhoneNoLbl)
            {
            IncludeCaption = false;
            }
            column(BillToContactEmailLbl;BillToContactEmailLbl)
            {
            IncludeCaption = false;
            }
            column(SellToContactPhoneNo;SellToContact."Phone No.")
            {
            IncludeCaption = false;
            }
            column(SellToContactMobilePhoneNo;SellToContact."Mobile Phone No.")
            {
            IncludeCaption = false;
            }
            column(SellToContactEmail;SellToContact."E-Mail")
            {
            IncludeCaption = false;
            }
            column(BillToContactPhoneNo;BillToContact."Phone No.")
            {
            IncludeCaption = false;
            }
            column(BillToContactMobilePhoneNo;BillToContact."Mobile Phone No.")
            {
            IncludeCaption = false;
            }
            column(BillToContactEmail;BillToContact."E-Mail")
            {
            IncludeCaption = false;
            }
            dataitem(CopyLoop;Integer)
            {
                DataItemTableView = sorting(Number);

                column(ReportForNavId_2;2)
                {
                } // Autogenerated by ForNav - Do not delete
                column(ReportForNav_CopyLoop;ReportForNavWriteDataItem('CopyLoop', CopyLoop))
                {
                }
                dataitem(PageLoop;Integer)
                {
                    DataItemTableView = sorting(Number)where(Number=CONST(1));

                    column(ReportForNavId_3;3)
                    {
                    } // Autogenerated by ForNav - Do not delete
                    column(ReportForNav_PageLoop;ReportForNavWriteDataItem('PageLoop', PageLoop))
                    {
                    }
                    column(ReportTitleCopyText;StrSubstNo(Text004, CopyText))
                    {
                    IncludeCaption = false;
                    }
                    column(CustAddr1;CustAddr[1])
                    {
                    IncludeCaption = false;
                    }
                    column(CompanyAddr1;CompanyAddr[1])
                    {
                    IncludeCaption = false;
                    }
                    column(CustAddr2;CustAddr[2])
                    {
                    IncludeCaption = false;
                    }
                    column(CompanyAddr2;CompanyAddr[2])
                    {
                    IncludeCaption = false;
                    }
                    column(CustAddr3;CustAddr[3])
                    {
                    IncludeCaption = false;
                    }
                    column(CompanyAddr3;CompanyAddr[3])
                    {
                    IncludeCaption = false;
                    }
                    column(AmountCaption;AmountCaptionLbl)
                    {
                    IncludeCaption = false;
                    }
                    column(UnitPriceCaption;UnitPriceCaptionLbl)
                    {
                    IncludeCaption = false;
                    }
                    column(SubtotalCaption;SubtotalCaptionLbl)
                    {
                    IncludeCaption = false;
                    }
                    column(SalesLineInvDiscAmtCaptn;SalesLineInvDiscAmtCaptnLbl)
                    {
                    IncludeCaption = false;
                    }
                    column(TotalExclVATText;TotalExclVATText)
                    {
                    IncludeCaption = false;
                    }
                    column(VATAmount;VATAmount)
                    {
                    IncludeCaption = false;
                    AutoFormatType = 1;
                    AutoFormatExpression = "Sales Header"."Currency Code";
                    }
                    column(TotalInclVATText;TotalInclVATText)
                    {
                    IncludeCaption = false;
                    }
                    column(VATAmtLineVATAmtText;VATAmountLine.VATAmountText)
                    {
                    IncludeCaption = false;
                    }
                    column(VATDiscountAmountCaption;VATDiscountAmountCaptionLbl)
                    {
                    IncludeCaption = false;
                    }
                    column(TotalText;TotalText)
                    {
                    IncludeCaption = false;
                    }
                    column(SalesLineLineDiscCaption;SalesLineLineDiscCaptionLbl)
                    {
                    IncludeCaption = false;
                    }
                    column(CustAddr4;CustAddr[4])
                    {
                    IncludeCaption = false;
                    }
                    column(CompanyAddr4;CompanyAddr[4])
                    {
                    IncludeCaption = false;
                    }
                    column(CustAddr5;CustAddr[5])
                    {
                    IncludeCaption = false;
                    }
                    column(CompanyInfoPhNo;CompanyInfo."Phone No.")
                    {
                    IncludeCaption = false;
                    }
                    column(CustAddr6;CustAddr[6])
                    {
                    IncludeCaption = false;
                    }
                    column(CompanyInfoVATRegNo;CompanyInfo."VAT Registration No.")
                    {
                    IncludeCaption = false;
                    }
                    column(CompanyInfoGiroNo;CompanyInfo."Giro No.")
                    {
                    IncludeCaption = false;
                    }
                    column(CompanyInfoBankName;CompanyInfo."Bank Name")
                    {
                    IncludeCaption = false;
                    }
                    column(CompanyInfoBankAccNo;CompanyInfo."Bank Account No.")
                    {
                    IncludeCaption = false;
                    }
                    column(CompanyInfo1Picture;CompanyInfo1.Picture)
                    {
                    IncludeCaption = false;
                    }
                    column(CompanyInfo2Picture;CompanyInfo2.Picture)
                    {
                    IncludeCaption = false;
                    }
                    column(CompanyInfo3Picture;CompanyInfo3.Picture)
                    {
                    IncludeCaption = false;
                    }
                    column(CompanyInfoHomePage;CompanyInfo."Home Page")
                    {
                    IncludeCaption = false;
                    }
                    column(CompanyInfoEmail;CompanyInfo."E-Mail")
                    {
                    IncludeCaption = false;
                    }
                    column(BilltoCustNo_SalesHdr;"Sales Header"."Bill-to Customer No.")
                    {
                    IncludeCaption = false;
                    }
                    column(DocDate_SalesHdr;Format("Sales Header"."Document Date", 0, 4))
                    {
                    IncludeCaption = false;
                    }
                    column(VATNoText;VATNoText)
                    {
                    IncludeCaption = false;
                    }
                    column(VATRegNo_SalesHdr;"Sales Header"."VAT Registration No.")
                    {
                    IncludeCaption = false;
                    }
                    column(SalesPersonText;SalesPersonText)
                    {
                    IncludeCaption = false;
                    }
                    column(SalesPurchPersonName;SalesPurchPerson.Name)
                    {
                    IncludeCaption = false;
                    }
                    column(ReferenceText;ReferenceText)
                    {
                    IncludeCaption = false;
                    }
                    column(YourReference_SalesHdr;"Sales Header"."Your Reference")
                    {
                    IncludeCaption = false;
                    }
                    column(CustAddr7;CustAddr[7])
                    {
                    IncludeCaption = false;
                    }
                    column(CustAddr8;CustAddr[8])
                    {
                    IncludeCaption = false;
                    }
                    column(CompanyAddr5;CompanyAddr[5])
                    {
                    IncludeCaption = false;
                    }
                    column(CompanyAddr6;CompanyAddr[6])
                    {
                    IncludeCaption = false;
                    }
                    column(PricesInclVAT_SalesHdr;"Sales Header"."Prices Including VAT")
                    {
                    IncludeCaption = false;
                    }
                    column(PageCaption;StrSubstNo(Text005, ''))
                    {
                    IncludeCaption = false;
                    }
                    column(OutputNo;OutputNo)
                    {
                    IncludeCaption = false;
                    }
                    column(PricesInclVATYesNo_SalesHdr;Format("Sales Header"."Prices Including VAT"))
                    {
                    IncludeCaption = false;
                    }
                    column(SelltoCustNo_SalesHdr;"Sales Header"."Sell-to Customer No.")
                    {
                    IncludeCaption = false;
                    }
                    column(PhNoCaption;PhNoCaptionLbl)
                    {
                    IncludeCaption = false;
                    }
                    column(FaxNoCaption;FaxNoCaptionLbl)
                    {
                    IncludeCaption = false;
                    }
                    column(VATRegNoCaption;VATRegNoCaptionLbl)
                    {
                    IncludeCaption = false;
                    }
                    column(GiroNoCaption;GiroNoCaptionLbl)
                    {
                    IncludeCaption = false;
                    }
                    column(BankNameCaption;BankNameCaptionLbl)
                    {
                    IncludeCaption = false;
                    }
                    column(AccNoCaption;AccNoCaptionLbl)
                    {
                    IncludeCaption = false;
                    }
                    column(ReturnOrderNoCaption;ReturnOrderNoCaptionLbl)
                    {
                    IncludeCaption = false;
                    }
                    column(EmailCaption;EmailCaptionLbl)
                    {
                    IncludeCaption = false;
                    }
                    column(HomePageCaption;HomePageCaptionLbl)
                    {
                    IncludeCaption = false;
                    }
                    column(DocDateCaption;DocDateCaptionLbl)
                    {
                    IncludeCaption = false;
                    }
                    column(BilltoCustNo_SalesHdrCaption;"Sales Header".FieldCaption("Bill-to Customer No."))
                    {
                    IncludeCaption = false;
                    }
                    column(PricesInclVAT_SalesHdrCaption;"Sales Header".FieldCaption("Prices Including VAT"))
                    {
                    IncludeCaption = false;
                    }
                    column(SelltoCustNo_SalesHdrCaption;"Sales Header".FieldCaption("Sell-to Customer No."))
                    {
                    IncludeCaption = false;
                    }
                    dataitem(DimensionLoop1;Integer)
                    {
                        DataItemLinkReference = "Sales Header";
                        DataItemTableView = sorting(Number)where(Number=FILTER(1..));

                        column(ReportForNavId_4;4)
                        {
                        } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_DimensionLoop1;ReportForNavWriteDataItem('DimensionLoop1', DimensionLoop1))
                        {
                        }
                        column(DimText;DimText)
                        {
                        IncludeCaption = false;
                        }
                        column(DimensionLoop1Number;Number)
                        {
                        IncludeCaption = false;
                        }
                        column(HdrDimCaption;HdrDimCaptionLbl)
                        {
                        IncludeCaption = false;
                        }
                        trigger OnPreDataItem();
                        begin
                            if not ShowInternalInfo then CurrReport.Break();
                            ReportForNav.OnPreDataItem('DimensionLoop1', DimensionLoop1);
                        end;
                        trigger OnAfterGetRecord();
                        begin
                            if Number = 1 then begin
                                if not DimSetEntry1.FindSet then CurrReport.Break();
                            end
                            else if not Continue then CurrReport.Break();
                            Clear(DimText);
                            Continue:=false;
                            repeat OldDimText:=DimText;
                                if DimText = '' then DimText:=StrSubstNo('%1 %2', DimSetEntry1."Dimension Code", DimSetEntry1."Dimension Value Code")
                                else
                                    DimText:=StrSubstNo('%1, %2 %3', DimText, DimSetEntry1."Dimension Code", DimSetEntry1."Dimension Value Code");
                                if StrLen(DimText) > MaxStrLen(OldDimText)then begin
                                    DimText:=OldDimText;
                                    Continue:=true;
                                    exit;
                                end;
                            until DimSetEntry1.Next() = 0;
                        end;
                    }
                    dataitem("Sales Line";"Sales Line")
                    {
                        DataItemLink = "Document Type"=FIELD("Document Type"), "Document No."=FIELD("No.");
                        DataItemLinkReference = "Sales Header";
                        DataItemTableView = sorting("Document Type", "Document No.", "Line No.");

                        column(ReportForNavId_5;5)
                        {
                        } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_SalesLine;ReportForNavWriteDataItem('SalesLine', "Sales Line"))
                        {
                        }
                        trigger OnPreDataItem();
                        begin
                            CurrReport.Break();
                            ReportForNav.OnPreDataItem('SalesLine', "Sales Line");
                        end;
                    }
                    dataitem(RoundLoop;Integer)
                    {
                        DataItemTableView = sorting(Number);

                        column(ReportForNavId_6;6)
                        {
                        } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_RoundLoop;ReportForNavWriteDataItem('RoundLoop', RoundLoop))
                        {
                        }
                        column(TypeInt;TypeInt)
                        {
                        IncludeCaption = false;
                        }
                        column(SalesLineNo;SalesLineNo)
                        {
                        IncludeCaption = false;
                        }
                        column(SalesLineLineNo;SalesLineLineNo)
                        {
                        IncludeCaption = false;
                        }
                        column(SalesLineLineAmt;SalesLine."Line Amount")
                        {
                        IncludeCaption = false;
                        AutoFormatType = 1;
                        AutoFormatExpression = "Sales Header"."Currency Code";
                        }
                        column(Desc_SalesLine;"Sales Line".Description)
                        {
                        IncludeCaption = false;
                        }
                        column(DocNo_SalesLine;SalesLine."Document No.")
                        {
                        IncludeCaption = false;
                        }
                        column(No2_SalesLine;"Sales Line"."No.")
                        {
                        IncludeCaption = false;
                        }
                        column(Qty_SalesLine;"Sales Line".Quantity)
                        {
                        IncludeCaption = false;
                        }
                        column(UOM_SalesLine;"Sales Line"."Unit of Measure")
                        {
                        IncludeCaption = false;
                        }
                        column(UnitPrice_SalesLine;"Sales Line"."Unit Price")
                        {
                        IncludeCaption = false;
                        AutoFormatType = 2;
                        AutoFormatExpression = "Sales Header"."Currency Code";
                        }
                        column(LineDisc_SalesLine;"Sales Line"."Line Discount %")
                        {
                        IncludeCaption = false;
                        }
                        column(AllowInvDisc_SalesLine;"Sales Line"."Allow Invoice Disc.")
                        {
                        IncludeCaption = false;
                        }
                        column(VATIdentifier_SalesLine;"Sales Line"."VAT Identifier")
                        {
                        IncludeCaption = false;
                        }
                        column(AllowInvDiscYesNo_SalesLine;Format("Sales Line"."Allow Invoice Disc."))
                        {
                        IncludeCaption = false;
                        }
                        column(SalesLineInvDiscAmt;-SalesLine."Inv. Discount Amount")
                        {
                        IncludeCaption = false;
                        AutoFormatType = 1;
                        AutoFormatExpression = "Sales Header"."Currency Code";
                        }
                        column(SalesLineAmtAfterLineDisc;SalesLine."Line Amount" - SalesLine."Inv. Discount Amount")
                        {
                        IncludeCaption = false;
                        AutoFormatType = 1;
                        AutoFormatExpression = "Sales Header"."Currency Code";
                        }
                        column(SalesLineAmtExclVATAmount;SalesLine."Line Amount" - SalesLine."Inv. Discount Amount" + VATAmount)
                        {
                        IncludeCaption = false;
                        AutoFormatType = 1;
                        AutoFormatExpression = "Sales Header"."Currency Code";
                        }
                        column(VATDiscountAmount;-VATDiscountAmount)
                        {
                        IncludeCaption = false;
                        AutoFormatType = 1;
                        AutoFormatExpression = "Sales Header"."Currency Code";
                        }
                        column(VATBaseDiscount_SalesHdr;"Sales Header"."VAT Base Discount %")
                        {
                        IncludeCaption = false;
                        }
                        column(VATBaseAmount;VATBaseAmount)
                        {
                        IncludeCaption = false;
                        AutoFormatType = 1;
                        AutoFormatExpression = "Sales Header"."Currency Code";
                        }
                        column(VATAmount2;VATAmount)
                        {
                        IncludeCaption = false;
                        AutoFormatType = 1;
                        AutoFormatExpression = "Sales Header"."Currency Code";
                        }
                        column(TotalAmountInclVAT;TotalAmountInclVAT)
                        {
                        IncludeCaption = false;
                        AutoFormatType = 1;
                        AutoFormatExpression = "Sales Header"."Currency Code";
                        }
                        column(AllowInvDiscCaption;AllowInvDiscCaptionLbl)
                        {
                        IncludeCaption = false;
                        }
                        column(Desc_SalesLineCaption;"Sales Line".FieldCaption(Description))
                        {
                        IncludeCaption = false;
                        }
                        column(No2_SalesLineCaption;"Sales Line".FieldCaption("No."))
                        {
                        IncludeCaption = false;
                        }
                        column(Qty_SalesLineCaption;"Sales Line".FieldCaption(Quantity))
                        {
                        IncludeCaption = false;
                        }
                        column(UOM_SalesLineCaption;"Sales Line".FieldCaption("Unit of Measure"))
                        {
                        IncludeCaption = false;
                        }
                        column(VATIdentifier_SalesLineCaption;"Sales Line".FieldCaption("VAT Identifier"))
                        {
                        IncludeCaption = false;
                        }
                        dataitem(DimensionLoop2;Integer)
                        {
                            DataItemTableView = sorting(Number)where(Number=FILTER(1..));

                            column(ReportForNavId_7;7)
                            {
                            } // Autogenerated by ForNav - Do not delete
                            column(ReportForNav_DimensionLoop2;ReportForNavWriteDataItem('DimensionLoop2', DimensionLoop2))
                            {
                            }
                            column(DimText2;DimText)
                            {
                            IncludeCaption = false;
                            }
                            column(DimensionLoop2Number;Number)
                            {
                            IncludeCaption = false;
                            }
                            column(LineDimensionsCaption;LineDimensionsCaptionLbl)
                            {
                            IncludeCaption = false;
                            }
                            trigger OnPreDataItem();
                            begin
                                if not ShowInternalInfo then CurrReport.Break();
                                DimSetEntry2.SetRange("Dimension Set ID", "Sales Line"."Dimension Set ID");
                                ReportForNav.OnPreDataItem('DimensionLoop2', DimensionLoop2);
                            end;
                            trigger OnAfterGetRecord();
                            begin
                                if Number = 1 then begin
                                    if not DimSetEntry2.FindSet then CurrReport.Break();
                                end
                                else if not Continue then CurrReport.Break();
                                Clear(DimText);
                                Continue:=false;
                                repeat OldDimText:=DimText;
                                    if DimText = '' then DimText:=StrSubstNo('%1 %2', DimSetEntry2."Dimension Code", DimSetEntry2."Dimension Value Code")
                                    else
                                        DimText:=StrSubstNo('%1, %2 %3', DimText, DimSetEntry2."Dimension Code", DimSetEntry2."Dimension Value Code");
                                    if StrLen(DimText) > MaxStrLen(OldDimText)then begin
                                        DimText:=OldDimText;
                                        Continue:=true;
                                        exit;
                                    end;
                                until DimSetEntry2.Next() = 0;
                            end;
                        }
                        trigger OnPreDataItem();
                        begin
                            MoreLines:=SalesLine.Find('+');
                            while MoreLines and (SalesLine.Description = '') and (SalesLine."Description 2" = '') and (SalesLine."No." = '') and (SalesLine.Quantity = 0) and (SalesLine.Amount = 0)do MoreLines:=SalesLine.Next(-1) <> 0;
                            if not MoreLines then CurrReport.Break();
                            SalesLine.SetRange("Line No.", 0, SalesLine."Line No.");
                            SetRange(Number, 1, SalesLine.Count);
                            ReportForNav.OnPreDataItem('RoundLoop', RoundLoop);
                        end;
                        trigger OnAfterGetRecord();
                        begin
                            if Number = 1 then SalesLine.Find('-')
                            else
                                SalesLine.Next;
                            "Sales Line":=SalesLine;
                            if(SalesLine.Type = SalesLine.Type::"G/L Account") and (not ShowInternalInfo)then begin
                                SalesLineNo:="Sales Line"."No.";
                                "Sales Line"."No.":='';
                            end;
                            TypeInt:="Sales Line".Type.AsInteger();
                            SalesLineLineNo:="Sales Line"."Line No.";
                        end;
                        trigger OnPostDataItem();
                        begin
                            SalesLine.DeleteAll();
                        end;
                    }
                    dataitem(VATCounter;Integer)
                    {
                        DataItemTableView = sorting(Number);

                        column(ReportForNavId_8;8)
                        {
                        } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_VATCounter;ReportForNavWriteDataItem('VATCounter', VATCounter))
                        {
                        }
                        column(VATAmtLineVATBase;VATAmountLine."VAT Base")
                        {
                        IncludeCaption = false;
                        AutoFormatType = 1;
                        AutoFormatExpression = "Sales Header"."Currency Code";
                        }
                        column(VATAmtLineVATAmt;VATAmountLine."VAT Amount")
                        {
                        IncludeCaption = false;
                        AutoFormatType = 1;
                        AutoFormatExpression = "Sales Header"."Currency Code";
                        }
                        column(VATAmtLineLineAmt;VATAmountLine."Line Amount")
                        {
                        IncludeCaption = false;
                        AutoFormatType = 1;
                        AutoFormatExpression = "Sales Header"."Currency Code";
                        }
                        column(VATAmtLineInvDiscBaseAmt;VATAmountLine."Inv. Disc. Base Amount")
                        {
                        IncludeCaption = false;
                        AutoFormatType = 1;
                        AutoFormatExpression = "Sales Header"."Currency Code";
                        }
                        column(VATAmtLineInvDiscAmt;VATAmountLine."Invoice Discount Amount")
                        {
                        IncludeCaption = false;
                        AutoFormatType = 1;
                        AutoFormatExpression = "Sales Header"."Currency Code";
                        }
                        column(VATAmtLineVATPercentage;VATAmountLine."VAT %")
                        {
                        IncludeCaption = false;
                        DecimalPlaces = 0: 5;
                        }
                        column(VATAmtLineVATIdentifier;VATAmountLine."VAT Identifier")
                        {
                        IncludeCaption = false;
                        }
                        column(VATAmtSpecificationCaptn;VATAmtSpecificationCaptnLbl)
                        {
                        IncludeCaption = false;
                        }
                        column(VATAmtLineVATIdentifrCptn;VATAmtLineVATIdentifrCptnLbl)
                        {
                        IncludeCaption = false;
                        }
                        column(InvDiscBaseAmtCaption;InvDiscBaseAmtCaptionLbl)
                        {
                        IncludeCaption = false;
                        }
                        column(LineAmtCaption;LineAmtCaptionLbl)
                        {
                        IncludeCaption = false;
                        }
                        trigger OnPreDataItem();
                        begin
                            if VATAmount = 0 then CurrReport.Break();
                            SetRange(Number, 1, VATAmountLine.Count);
                            ReportForNav.OnPreDataItem('VATCounter', VATCounter);
                        end;
                        trigger OnAfterGetRecord();
                        begin
                            VATAmountLine.GetLine(Number);
                        end;
                    }
                    dataitem(VATCounterLCY;Integer)
                    {
                        DataItemTableView = sorting(Number);

                        column(ReportForNavId_9;9)
                        {
                        } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_VATCounterLCY;ReportForNavWriteDataItem('VATCounterLCY', VATCounterLCY))
                        {
                        }
                        column(VALExchRate;VALExchRate)
                        {
                        IncludeCaption = false;
                        }
                        column(VALSpecLCYHeader;VALSpecLCYHeader)
                        {
                        IncludeCaption = false;
                        }
                        column(VALVATBaseLCY;VALVATBaseLCY)
                        {
                        IncludeCaption = false;
                        AutoFormatType = 1;
                        }
                        column(VALVATAmountLCY;VALVATAmountLCY)
                        {
                        IncludeCaption = false;
                        AutoFormatType = 1;
                        }
                        column(VATAmtLineVATPercentage2;VATAmountLine."VAT %")
                        {
                        IncludeCaption = false;
                        DecimalPlaces = 0: 5;
                        }
                        column(VATAmtLineVATIdentifier2;VATAmountLine."VAT Identifier")
                        {
                        IncludeCaption = false;
                        }
                        trigger OnPreDataItem();
                        begin
                            if(not GLSetup."Print VAT specification in LCY") or ("Sales Header"."Currency Code" = '') or (VATAmountLine.GetTotalVATAmount = 0)then CurrReport.Break();
                            SetRange(Number, 1, VATAmountLine.Count);
                            Clear(VALVATBaseLCY);
                            Clear(VALVATAmountLCY);
                            if GLSetup."LCY Code" = '' then VALSpecLCYHeader:=Text007 + Text008
                            else
                                VALSpecLCYHeader:=Text007 + Format(GLSetup."LCY Code");
                            CurrExchRate.FindCurrency("Sales Header"."Posting Date", "Sales Header"."Currency Code", 1);
                            VALExchRate:=StrSubstNo(Text009, CurrExchRate."Relational Exch. Rate Amount", CurrExchRate."Exchange Rate Amount");
                            ReportForNav.OnPreDataItem('VATCounterLCY', VATCounterLCY);
                        end;
                        trigger OnAfterGetRecord();
                        begin
                            VALVATAmountLCY:=0; // Inserted by ForNAV
                            VALVATBaseLCY:=0; // Inserted by ForNAV
                            VATAmountLine.GetLine(Number);
                            VALVATBaseLCY:=Round(CurrExchRate.ExchangeAmtFCYToLCY("Sales Header"."Posting Date", "Sales Header"."Currency Code", VATAmountLine."VAT Base", "Sales Header"."Currency Factor"));
                            VALVATAmountLCY:=Round(CurrExchRate.ExchangeAmtFCYToLCY("Sales Header"."Posting Date", "Sales Header"."Currency Code", VATAmountLine."VAT Amount", "Sales Header"."Currency Factor"));
                        end;
                    }
                    dataitem(Total;Integer)
                    {
                        DataItemTableView = sorting(Number)where(Number=CONST(1));

                        column(ReportForNavId_10;10)
                        {
                        } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_Total;ReportForNavWriteDataItem('Total', Total))
                        {
                        }
                        column(ShipToAddr8;ShipToAddr[8])
                        {
                        IncludeCaption = false;
                        }
                        column(ShipToAddr7;ShipToAddr[7])
                        {
                        IncludeCaption = false;
                        }
                        column(ShipToAddr6;ShipToAddr[6])
                        {
                        IncludeCaption = false;
                        }
                        column(ShipToAddr5;ShipToAddr[5])
                        {
                        IncludeCaption = false;
                        }
                        column(ShipToAddr4;ShipToAddr[4])
                        {
                        IncludeCaption = false;
                        }
                        column(ShipToAddr3;ShipToAddr[3])
                        {
                        IncludeCaption = false;
                        }
                        column(ShipToAddr2;ShipToAddr[2])
                        {
                        IncludeCaption = false;
                        }
                        column(ShipToAddr1;ShipToAddr[1])
                        {
                        IncludeCaption = false;
                        }
                        column(ShowShippingAddr;ShowShippingAddr)
                        {
                        IncludeCaption = false;
                        }
                        column(ShiptoAddrCaption;ShiptoAddrCaptionLbl)
                        {
                        IncludeCaption = false;
                        }
                        trigger OnPreDataItem();
                        begin
                            if not ShowShippingAddr then CurrReport.Break();
                            ReportForNav.OnPreDataItem('Total', Total);
                        end;
                    }
                    trigger OnPreDataItem();
                    begin
                        ReportForNav.OnPreDataItem('PageLoop', PageLoop);
                    end;
                }
                trigger OnPreDataItem();
                begin
                    NoOfLoops:=Abs(NoOfCopies) + 1;
                    CopyText:='';
                    SetRange(Number, 1, NoOfLoops);
                    OutputNo:=1;
                    ReportForNav.OnPreDataItem('CopyLoop', CopyLoop);
                end;
                trigger OnAfterGetRecord();
                var SalesPost: Codeunit "Sales-Post";
                begin
                    Clear(SalesLine);
                    Clear(SalesPost);
                    SalesLine.DeleteAll();
                    VATAmountLine.DeleteAll();
                    SalesPost.GetSalesLines("Sales Header", SalesLine, 0);
                    SalesLine.CalcVATAmountLines(0, "Sales Header", SalesLine, VATAmountLine);
                    SalesLine.UpdateVATOnLines(0, "Sales Header", SalesLine, VATAmountLine);
                    VATAmount:=VATAmountLine.GetTotalVATAmount;
                    VATBaseAmount:=VATAmountLine.GetTotalVATBase;
                    VATDiscountAmount:=VATAmountLine.GetTotalVATDiscount("Sales Header"."Currency Code", "Sales Header"."Prices Including VAT");
                    TotalAmountInclVAT:=VATAmountLine.GetTotalAmountInclVAT;
                    if Number > 1 then begin
                        CopyText:=FormatDocument.GetCOPYText;
                        OutputNo+=1;
                    end;
                end;
                trigger OnPostDataItem();
                begin
                    if not IsReportInPreviewMode then CODEUNIT.Run(CODEUNIT::"Sales-Printed", "Sales Header");
                end;
            }
            trigger OnPreDataItem();
            begin
                ReportForNav.OnPreDataItem('SalesHeader', "Sales Header");
            end;
            trigger OnAfterGetRecord();
            begin
                CurrReport.Language:=Language.GetLanguageIdOrDefault("Language Code");
                FormatAddressFields("Sales Header");
                FormatDocumentFields("Sales Header");
                if SellToContact.Get("Sell-to Contact No.")then;
                if BillToContact.Get("Bill-to Contact No.")then;
                DimSetEntry1.SetRange("Dimension Set ID", "Dimension Set ID");
            end;
            trigger OnPostDataItem();
            begin
                OnAfterPostDataItem("Sales Header");
            end;
        }
    }
    requestpage
    {
        SaveValues = true;

        layout
        {
            area(content)
            {
                group(Options)
                {
                    Caption = 'Options';

                    field(NoOfCopies;NoOfCopies)
                    {
                        ApplicationArea = SalesReturnOrder;
                        Caption = 'No. of Copies';
                        ToolTip = 'Specifies how many copies of the document to print.';
                    }
                    field(ShowInternalInfo;ShowInternalInfo)
                    {
                        ApplicationArea = SalesReturnOrder;
                        Caption = 'Show Internal Information';
                        ToolTip = 'Specifies if you want the printed report to show information that is only for internal use.';
                    }
                    field(LogInteraction;LogInteraction)
                    {
                        ApplicationArea = SalesReturnOrder;
                        Caption = 'Log Interaction';
                        Enabled = LogInteractionEnable;
                        ToolTip = 'Specifies if you want to record the reports that you print as interactions.';
                    }
                    field(ForNavOpenDesigner;ReportForNavOpenDesigner)
                    {
                        ApplicationArea = All;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                        ToolTip = 'Opens the ForNAV designer when the "Preview" button is pressed';

                        trigger OnValidate()begin
                            ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                            CurrReport.RequestOptionsPage.Close();
                        end;
                    }
                }
            }
        }
        actions
        {
        }
        trigger OnInit()begin
            LogInteractionEnable:=true;
        end;
        trigger OnOpenPage()begin
            InitLogInteraction;
            LogInteractionEnable:=LogInteraction;
            ReportForNavOpenDesigner:=false;
        end;
    }
    trigger OnInitReport()begin
        GLSetup.Get();
        CompanyInfo.Get();
        SalesSetup.Get();
        FormatDocument.SetLogoPosition(SalesSetup."Logo Position on Documents", CompanyInfo1, CompanyInfo2, CompanyInfo3);
        OnAfterInitReport;
        ;
        ReportsForNavInit;
    end;
    trigger OnPostReport()begin
        if LogInteraction and not IsReportInPreviewMode then if "Sales Header".FindSet then repeat if "Sales Header"."Bill-to Contact No." <> '' then SegManagement.LogDocument(18, "Sales Header"."No.", 0, 0, DATABASE::Contact, "Sales Header"."Bill-to Contact No.", "Sales Header"."Salesperson Code", "Sales Header"."Campaign No.", "Sales Header"."Posting Description", "Sales Header"."Opportunity No.")
                    else
                        SegManagement.LogDocument(18, "Sales Header"."No.", 0, 0, DATABASE::Customer, "Sales Header"."Bill-to Customer No.", "Sales Header"."Salesperson Code", "Sales Header"."Campaign No.", "Sales Header"."Posting Description", "Sales Header"."Opportunity No.");
                until "Sales Header".Next() = 0;
    end;
    trigger OnPreReport()begin
        if not CurrReport.UseRequestPage then InitLogInteraction;
        ;
        ReportsForNavPre;
    end;
    var Text004: Label 'Return Order Confirmation %1', Comment='%1 = Document No.';
    Text005: Label 'Page %1';
    GLSetup: Record "General Ledger Setup";
    SalesSetup: Record "Sales & Receivables Setup";
    SalesPurchPerson: Record "Salesperson/Purchaser";
    CompanyInfo: Record "Company Information";
    CompanyInfo1: Record "Company Information";
    CompanyInfo2: Record "Company Information";
    CompanyInfo3: Record "Company Information";
    VATAmountLine: Record "VAT Amount Line" temporary;
    SalesLine: Record "Sales Line" temporary;
    DimSetEntry1: Record "Dimension Set Entry";
    DimSetEntry2: Record "Dimension Set Entry";
    RespCenter: Record "Responsibility Center";
    CurrExchRate: Record "Currency Exchange Rate";
    SellToContact: Record Contact;
    BillToContact: Record Contact;
    Language: Codeunit Language;
    FormatAddr: Codeunit "Format Address";
    FormatDocument: Codeunit "Format Document";
    SegManagement: Codeunit SegManagement;
    CustAddr: array[8]of Text[100];
    ShipToAddr: array[8]of Text[100];
    CompanyAddr: array[8]of Text[100];
    SalesPersonText: Text[30];
    VATNoText: Text[80];
    ReferenceText: Text[80];
    TotalText: Text[50];
    TotalExclVATText: Text[50];
    TotalInclVATText: Text[50];
    MoreLines: Boolean;
    NoOfCopies: Integer;
    NoOfLoops: Integer;
    CopyText: Text[30];
    ShowShippingAddr: Boolean;
    DimText: Text[120];
    OldDimText: Text[75];
    ShowInternalInfo: Boolean;
    Continue: Boolean;
    VATAmount: Decimal;
    VATBaseAmount: Decimal;
    VATDiscountAmount: Decimal;
    TotalAmountInclVAT: Decimal;
    LogInteraction: Boolean;
    VALVATBaseLCY: Decimal;
    VALVATAmountLCY: Decimal;
    VALSpecLCYHeader: Text[80];
    VALExchRate: Text[50];
    Text007: Label 'VAT Amount Specification in ';
    Text008: Label 'Local Currency';
    Text009: Label 'Exchange rate: %1/%2';
    OutputNo: Integer;
    TypeInt: Integer;
    SalesLineNo: Code[20];
    SalesLineLineNo: Integer;
    [InDataSet]
    LogInteractionEnable: Boolean;
    AmountCaptionLbl: Label 'Amount';
    UnitPriceCaptionLbl: Label 'Unit Price';
    SubtotalCaptionLbl: Label 'Subtotal';
    SalesLineInvDiscAmtCaptnLbl: Label 'Invoice Discount Amount';
    VATDiscountAmountCaptionLbl: Label 'Payment Discount on VAT';
    SalesLineLineDiscCaptionLbl: Label 'Discount %';
    PhNoCaptionLbl: Label 'Phone No.';
    FaxNoCaptionLbl: Label 'Fax No.';
    VATRegNoCaptionLbl: Label 'VAT Reg. No.';
    GiroNoCaptionLbl: Label 'Giro No.';
    BankNameCaptionLbl: Label 'Bank';
    AccNoCaptionLbl: Label 'Account No.';
    ReturnOrderNoCaptionLbl: Label 'Return Order No.';
    EmailCaptionLbl: Label 'Email';
    HomePageCaptionLbl: Label 'Home Page';
    DocDateCaptionLbl: Label 'Document Date';
    HdrDimCaptionLbl: Label 'Header Dimensions';
    AllowInvDiscCaptionLbl: Label 'Allow Invoice Discount';
    LineDimensionsCaptionLbl: Label 'Line Dimensions';
    VATAmtSpecificationCaptnLbl: Label 'VAT Amount Specification';
    VATAmtLineVATIdentifrCptnLbl: Label 'VAT Identifier';
    InvDiscBaseAmtCaptionLbl: Label 'Inv. Disc. Base Amount';
    LineAmtCaptionLbl: Label 'Line Amount';
    ShiptoAddrCaptionLbl: Label 'Ship-to Address';
    TotalCaptionLbl: Label 'Total';
    VATPercentageCaptionLbl: Label 'VAT %';
    VATBaseCaptionLbl: Label 'VAT Base';
    VATAmountCaptionLbl: Label 'VAT Amount';
    VATIdentifierCaptionLbl: Label 'VAT Identifier';
    InvDiscAmtCaptionLbl: Label 'Invoice Discount Amount';
    SellToContactPhoneNoLbl: Label 'Sell-to Contact Phone No.';
    SellToContactMobilePhoneNoLbl: Label 'Sell-to Contact Mobile Phone No.';
    SellToContactEmailLbl: Label 'Sell-to Contact E-Mail';
    BillToContactPhoneNoLbl: Label 'Bill-to Contact Phone No.';
    BillToContactMobilePhoneNoLbl: Label 'Bill-to Contact Mobile Phone No.';
    BillToContactEmailLbl: Label 'Bill-to Contact E-Mail';
    procedure InitLogInteraction()begin
        LogInteraction:=SegManagement.FindInteractTmplCode(18) <> '';
    end;
    procedure InitializeRequest(ShowInternalInfoFrom: Boolean;
    LogInteractionFrom: Boolean)begin
        InitLogInteraction;
        ShowInternalInfo:=ShowInternalInfoFrom;
        LogInteraction:=LogInteractionFrom;
    end;
    local procedure IsReportInPreviewMode(): Boolean var MailManagement: Codeunit "Mail Management";
    begin
        exit(CurrReport.Preview or MailManagement.IsHandlingGetEmailBody);
    end;
    local procedure FormatAddressFields(var SalesHeader: Record "Sales Header")begin
        FormatAddr.GetCompanyAddr(SalesHeader."Responsibility Center", RespCenter, CompanyInfo, CompanyAddr);
        FormatAddr.SalesHeaderBillTo(CustAddr, SalesHeader);
        ShowShippingAddr:=FormatAddr.SalesHeaderShipTo(ShipToAddr, CustAddr, SalesHeader);
    end;
    local procedure FormatDocumentFields(SalesHeader: Record "Sales Header")begin
        with SalesHeader do begin
            FormatDocument.SetTotalLabels("Currency Code", TotalText, TotalInclVATText, TotalExclVATText);
            FormatDocument.SetSalesPerson(SalesPurchPerson, "Salesperson Code", SalesPersonText);
            ReferenceText:=FormatDocument.SetText("Your Reference" <> '', FieldCaption("Your Reference"));
            VATNoText:=FormatDocument.SetText("VAT Registration No." <> '', FieldCaption("VAT Registration No."));
        end;
    end;
    [IntegrationEvent(TRUE, false)]
    local procedure OnAfterInitReport()begin
    end;
    [IntegrationEvent(TRUE, false)]
    local procedure OnAfterPostDataItem(var SalesHeader: Record "Sales Header")begin
    end;
    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var ReportForNav: Codeunit "ForNAV Report Management";
    ReportForNavTotalsCausedBy: Integer;
    ReportForNavInitialized: Boolean;
    ReportForNavShowOutput: Boolean;
    ReportForNavOpenDesigner: Boolean;
    [InDataSet]
    ReportForNavAllowDesign: Boolean;
    local procedure ReportsForNavInit()var id: Integer;
    begin
        Evaluate(id, CopyStr(CurrReport.ObjectId(false), StrPos(CurrReport.ObjectId(false), ' ') + 1));
        ReportForNav.OnInit(id, ReportForNavAllowDesign);
    end;
    local procedure ReportsForNavPre()begin
        if ReportForNav.LaunchDesigner(ReportForNavOpenDesigner)then CurrReport.Quit();
    end;
    local procedure ReportForNavSetTotalsCausedBy(value: Integer)begin
        ReportForNavTotalsCausedBy:=value;
    end;
    local procedure ReportForNavSetShowOutput(value: Boolean)begin
        ReportForNavShowOutput:=value;
    end;
    local procedure ReportForNavInit(jsonObject: JsonObject)begin
        ReportForNav.Init(jsonObject, CurrReport.ObjectId);
    end;
    local procedure ReportForNavWriteDataItem(dataItemId: Text;
    rec: Variant): Text var values: Text;
    jsonObject: JsonObject;
    currLanguage: Integer;
    begin
        if not ReportForNavInitialized then begin
            ReportForNavInit(jsonObject);
            ReportForNavInitialized:=true;
        end;
        case(dataItemId)of 'SalesHeader': begin
            jsonObject.Add('CurrReport$Language$Integer', CurrReport.Language);
        end;
        'RoundLoop': begin
            ReportForNav.AddAdditionalValues(jsonObject, 'SalesLine', "Sales Line");
        end;
        end;
        ReportForNav.AddDataItemValues(jsonObject, dataItemId, rec);
        jsonObject.WriteTo(values);
        exit(values);
    end;
// Reports ForNAV Autogenerated code - do not delete or modify -->
}
